require "tori/version"
require "net/http"
require "date"
require "bencode"
require "digest"

module Tori
    class Torrent
	attr_reader :metadata, :announce

	def initialize(torrent_file=nil)
	     raise Tori::TorrentError if torrent_file.nil?
             bencoded_stream = File.open(File.expand_path(torrent_file)).read
	     @metadata = parse bencoded_stream
	     @anounce = @metadata["announce"]
	end

	def peers
	    tracker = URI.new @announce
	    params = {
		# URL encoded 20-byte SHA1 hash of the value of the info key from the Metainfo file.
		# Note that the value will be a bencoded dictionary,
		info_hash:  Digest::SHA1.hexdigest(@metadata["info"].bencode),

		# URL encoded 20-byte string used as a unique ID for the client,
		# generated by the client at startup. This is allowed to be any value, and may be binary data.
		peer_id:    Digest::MD5.hexdigest("#{Process.pid}#{Datetime.now}"),

		# Ports reserved for BitTorrent are typically 6881-6889.
		port:       6885,

		# The total amount uploaded (since the client sent the 'started' event to the tracker) in base ten ASCII.
		# this should be the total number of bytes uploaded.
		uploaded:   0,

		# The total amount downloaded (since the client sent the 'started' event to the tracker) in base ten ASCII.
		# this should be the total number of bytes downloaded.
		downloaded: 0,

		# The number of bytes needed to download to be 100% complete and get all the included files in the torrent.
		left:      length,

		#indicates that the client accepts a compact response (1 is yes, 0 is no).
		compact:    1,

		# Indicates that the tracker can omit peer id field in peers dictionary. This option is ignored if compact is enabled.
		no_peer_id: 0,

		# event: If specified, must be one of started, completed, stopped
		# If not specified, then this request is one performed at regular intervals.
		   # started: The first request to the tracker must include the event key with this value.
		   # stopped: Must be sent to the tracker if the client is shutting down gracefully.
		   # completed: Must be sent to the tracker when the download completes. However, must not be sent if the download was already 100% complete when the client started. Presumably, this is to allow the tracker to increment the "completed downloads" metric based solely on this event
		event:      "started"
	    }
	    peers = Net::HTTP.get tracker
	    peers
	end

        private
	def length
	    length = 0
            info = @metadata["info"]
	    if info.has_key? "length"
		length = info["length"]
	    else
		info["files"].each {|file| length += file["length"]}
	    end
	    length
	end

	def parse(stream)
	    BEncode::Parser.new(stream).parse!
	end
    end

    class Client
	attr_reader :torrent
	def initialize torrent_obj
	    @torrent = torrent_obj
	end

	def self.connect
	    @torrent.peers.each do |peer|
		Net::HTTP.get peer
	    end
	end
    end

    class TorrentError < StandardError
    end

end
